center.plot(cbind( uva$Kidney[-nYear], unc$Kidney[-nYear], mcv$Kidney[-nYear], duke$Kidney[-nYear]), Year = seq(1988,(1988+nYear - 2)), title = "Kidney")
abline(a = 67.04913 - 1988*27.7259, b = 2.72598, col = "orange")
abline(a = 67.04913 - 1988*2.77259, b = 2.72598, col = "orange")
abline(a = 67.04913 - 1988*2.72598, b = 2.72598, col = "orange")
plot(xplant.lme2) # residuals vs. fits
f <- fitted(xplant.lme2)
r <- residuals(xplant.lme2)
plot(f,r)  # average
plot(xplant.lme2) # residuals vs. fits
f <- fitted(xplant.lme2)
r <- residuals(xplant.lme2)
plot(f,r)  # average
plot(xplant.lme2) # residuals vs. fits
plot(xplant.lme2) # residuals vs. fits
qqnorm(residuals(xplant.lme2))
qqline(residuals(xplant.lme2)) # average
xyplot(Kidney~nYears|School, data = xplantC,type = c("p", "r"))
xplant.lme3 <- lmer(Kidney~ nYears + (nYears|School), data = xplantC, REML = T)
coef(xplant.lme3)
fixef(xplant.lme3)
ranef(xplant.lme3)
dotplot(ranef(xplant.lme3,  condVar = T), scales = list(relation = "free"))
plot(xplant.lme3) # residuals vs. fits
qqnorm(residuals(xplant.lme3))
qqline(residuals(xplant.lme3))
center.plot(cbind( uva$Kidney[-nYear], unc$Kidney[-nYear], mcv$Kidney[-nYear], duke$Kidney[-nYear]), Year = seq(1988,(1988+nYear - 2)), title = "Kidney")
sapply(1:4, function(i){
abline(a = coef(xplant.lme3)$School[i,1] - 1988*coef(xplant.lme3)$School[i,2], b = coef(xplant.lme3)$School[i,2], col = c( "blue3" , "purple" , "lightblue3","orange")[i])
})
newkdata <- data.frame(Kidney =0, nYears = 30, KidneyL1 = xplantC$Kidney[29], School = "UVA")
mm <- model.matrix(terms(xplant.lme5), newkdata)
#Set working directory
setwd("/Users/sabreenaabedin/Desktop/class/SYS4021")
#Read data
r11xplant <- read.table("R11xplant.csv", sep = ",", header = T)
r11donor<-read.table("R11donor.csv", sep = ",", header = T)
uva <- read.table("UVAxplant.csv", sep = ",", header = T)
unc <- read.table("UNCxplant.csv", sep = ",", header = T)
mcv <- read.table("MCVxplant.csv", sep = ",", header = T)
duke <- read.table("Dukexplant.csv", sep = ",", header = T)
library(forecast)
#    Source the bootstrapping functions
library(boot) #If you don't have this library, install it by: install.packages('boot')
source("TSbootfunctions.R")
source("SPM_Panel.R")
plot(density(mcv$Kidney))
#Perform a paired t-test between uva and mcv kidney transplants
uva.kidney<-uva$Kidney
mcv.kidney<-mcv$Kidney
t.test(uva.kidney, mcv.kidney,paired=T)
plot(density(r11xplant$Kidney))
#Perform a paired t-test between uva and duke kidney transplants
uva.kidney<-uva$Kidney
duke.kidney<-duke$Kidney
t.test(uva.kidney, duke.kidney,paired=T)
# Compute the difference between uva kidney transplants and mcv kidney transplants from 1988 to 2016
kid.diff<-ts(uva.kidney-mcv.kidney,1988,2016)
ts.plot(kid.diff,ylab='UVa-MCV',main = "Difference in Number of Transplants, UVA-MCV")
bs.mean<-function(x,i) { return(mean(x[i])) }
bs.kid.diff<-boot(kid.diff,bs.mean,R=2000)
bs.kid.diff # standard error = 5.521304
plot(bs.kid.diff,index=1)
plot(uva.kid.lm2)
boot.ci(bs.kid.diff,0.95,type=c('bca','perc'))
# Compute the difference between uva kidney transplants and mcv kidney transplants from 1988 to 2016
kid.diff<-ts(uva.kidney-mcv.kidney,1988,2016)
ts.plot(kid.diff,ylab='UVa-MCV',main = "Difference in Number of Transplants, UVA-MCV")
bs.mean<-function(x,i) { return(mean(x[i])) }
# Bootstrap mean differences - syntax: boot(data= , statistic= , R= ), R = # replications
bs.kid.diff<-boot(kid.diff,bs.mean,R=2000)
bs.kid.diff # standard error = 5.521304
plot(bs.kid.diff,index=1)
# confidence intervals using bca and percentile
boot.ci(bs.kid.diff,0.95,type=c('bca','perc'))
# 95%   (-28.31,  -6.28 )   (-28.70,  -6.66 )
# Compute the difference between uva kidney transplants and mcv kidney transplants from 1988 to 2016
kid.diff2<-ts(uva.kidney-duke.kidney,1988,2016)
ts.plot(kid.diff2,ylab='UVa-Duke',main = "Difference in Number of Transplants, UVA-Duke")
bs.mean<-function(x,i) { return(mean(x[i])) }
# Bootstrap mean differences - syntax: boot(data= , statistic= , R= ), R = # replications
bs.kid.diff2<-boot(kid.diff2,bs.mean,R=2000)
bs.kid.diff2 # standard error = 4.184158
plot(bs.kid.diff2,index=1)
# confidence intervals using bca and percentile
boot.ci(bs.kid.diff2,0.95,type=c('bca','perc'))
# 95%   (-29.28, -12.93 )   (-28.86, -12.72 )
# We reject the null hypothesis that there is no difference between the two centers
# Our 95% confidence interval does not include 0, which would've implied no difference.
# There is a significant difference in kidney transplants
pairs(~ uva$Kidney[-30] + duke$Kidney[-30] + r11donor$Kidney[-30] + r11xplant$Kidney[-30])
uva.kidney.lm<-lm(kid.diff~r11donor$Kidney[-30])
summary(uva.kidney.lm) # is significant
# Model Utility Test using Chi2 statistic
kidney.null <- lm(kid.diff~1, data = r11donor)
anova(kidney.null, uva.kidney.lm, test = "Chi")
par(mfrow=c(2,2))
plot(uva.kidney.lm)
par(mfrow=c(1,1))
uva.kfit <- fitted(uva.kidney.lm)
#    Get the residuals from the regression model
uva.ke <- residuals(uva.kidney.lm)
#    Get the regression model
uva.mod <- model.matrix(uva.kidney.lm)
#   Bootstrapping LM
uva.kidney.boot <- RTSB(uva$Kidney[-30], r11donor$Kidney[-30], uva.kfit, uva.ke, uva.mod,5000)
uva.kidney.boot$t
sqrt(abs(var(uva.kidney.boot$t)))
#    95% CI of r11donor
boot.ci(uva.kidney.boot, .95, index=2)
#    Distribution of b1
par(mfrow = c(1,2))
hist(uva.kidney.boot$t[,2], main = "Region 11 Donors",xlab ="Coefficient Values",   col = "steelblue", breaks = 50)
qqnorm(uva.kidney.boot $t[,2])
qqline(uva.kidney.boot $t[,2])
par(mfrow = c(1,1))
uvaduke.kidney.lm<-lm(kid.diff2~r11donor$Kidney[-30])
summary(uvaduke.kidney.lm) # not significant at 0.05 significance level (p=0.1382), low adj R^2 (0.04548)
# Model Utility Test using Chi2 statistic
kidney.null.duke <- lm(kid.diff2~1, data = r11donor)
anova(kidney.null.duke, uvaduke.kidney.lm, test = "Chi")
# model utility test is not significantly different with a p-value of 0.12
# not more useful than the proportional model
#Step 2.2 (Duke) Generate the diagnostic plots. Interpret the results of the diagnostic plots. Do you see any problem?
par(mfrow=c(2,2))
plot(uvaduke.kidney.lm)
par(mfrow=c(1,1))
# non- constant variance, non-normal distribution, high cook's distnace
# Step 2.3 (Duke) Estimate the model with bootstrapping (by residuals). Is b1 significant?
# Get the fitted values from the regression model
uvaduke.kfit <- fitted(uvaduke.kidney.lm)
#    Get the residuals from the regression model
uvaduke.ke <- residuals(uvaduke.kidney.lm)
#    Get the regression model
uvaduke.mod <- model.matrix(uvaduke.kidney.lm)
#   Bootstrapping LM
uvaduke.kidney.boot <- RTSB(uva$Kidney[-30], r11donor$Kidney[-30], uvaduke.kfit, uvaduke.ke, uvaduke.mod,5000)
# outcome variable, input variable, fitted, residuals, parameters, # replications
uvaduke.kidney.boot$t
sqrt(abs(var(uvaduke.kidney.boot$t)))
#    95% CI of r11donor
boot.ci(uvaduke.kidney.boot, .95, index=2)
#(-0.0522,  0.0042) zero is included in interval so uva and duke not significantly different
#    Distribution of b1
par(mfrow = c(1,2))
hist(uvaduke.kidney.boot$t[,2], main = "Region 11 Donors",xlab ="Coefficient Values",   col = "steelblue", breaks = 50)
qqnorm(uvaduke.kidney.boot $t[,2])
qqline(uvaduke.kidney.boot $t[,2])
par(mfrow = c(1,1))
#end duke
head(airquality)
boxplot(airquality$Ozone)
plot(airquality$Ozone)
plot(airquality$Ozone,which=2)
? plot
plot(density(airquality$Ozone))
plot(density(airquality$Ozone))
?density
plot(x,density(airquality$Ozone))
plot(1,density(airquality$Ozone))
plot(bs.kid.diff,index=1)
df.glm <- glm(Ozaone~., data = airquality, family = binomial)
df.glm <- glm(airquality$Ozaone~., data = airquality, family = binomial)
df.glm <- glm(Ozone~., data = airquality, family = binomial)
df.glm <- glm(Ozone~., data = airquality)
plot(df.glm)
plot(df.glm, which=2)
head(airquality)
uva.pairs(airquality[,c("Ozone", "Solar.R", "Wind", "Temp", "Month", "Day")])
pred.pca <- princomp(airquality[,c("Ozone", "Solar.R", "Wind", "Temp", "Month", "Day")], cor = T ) # calculate principal components
pred.pca <- princomp(airquality[,c("Ozone", "Wind", "Temp", "Month", "Day")], cor = T ) # calculate principal components
pred.pca <- princomp(na.omit(airquality[,c("Ozone", "Wind", "Temp", "Month", "Day")]), cor = T ) # calculate principal components
biplot(pred.pca) # graph biplot
pred.pca <- princomp(na.omit(airquality[,c("Ozone","Solar.R" "Wind", "Temp", "Month", "Day")]), cor = T ) # calculate principal components
pred.pca <- princomp(na.omit(airquality[,c("Ozone","Solar.R", "Wind", "Temp", "Month", "Day")]), cor = T ) # calculate principal components
biplot(pred.pca) # graph biplot
loadings (pred.pca)
screeplot(loadings(pred.pca))
plot(loadings(pred.pca))
barplot(loadings(pred.pca))
?screeplot
.167 +.333
aq.lm <- lm(Ozone~., data=airquality)
summary(aq.lm)
t.test(aq.lm$coefficients, aq.lm$residuals,paired=T)
df.glm <- lm(Ozone~ Solar.R + Wind + Temp + Month + Day, data = airquality)
df.glm <- lm(Ozone~ Solar.R + Wind + Temp + Month + Day + (Solar.R + Wind + Temp + Month + Day)^2, data = airquality)
aq.lm <- lm(Ozone~., data=airquality)
df.interactions <- lm(Ozone~ Solar.R + Wind + Temp + Month + Day + (Solar.R + Wind + Temp + Month + Day)^2, data = airquality)
summary(aq.interactions)
aq.interactions <- lm(Ozone~ Solar.R + Wind + Temp + Month + Day + (Solar.R + Wind + Temp + Month + Day)^2, data = airquality)
summary(aq.interactions)
anova(aq.lm,aq.interactions) # only for nested models
setwd("/Users/sabreenaabedin/Desktop/class/SYS4021")
source("AccidentInput.R")
source("SPM_Panel.R")
source("PCAplots.R")
source("http://www.phaget4.org/R/myImagePlot.R") # heatmap
source("TestSet.R")
source("princompreg.R")
source("FactorPlots.R")
source("pc.glm.R")
source("ROC.R")
source("TSbootfunctions.R")
source("Transplant.plots.R")
library(lattice)
library(boot)
library(MASS)
library(forecast)
library(lme4)
df <-read.table('trainkld.txt',header=T,sep=',')
View(df)
df.ts<-ts(df$count) # create a time series
df.ts<-ts(df$x) # create a time series
summary(df.ts)
abline(spam.trend, col = "red") # add trendline
plot(df.ts[time.df], type = "l") # plot general trend over time
plot(df.ts, type = "l") # plot general trend over time
pg.df<-spec.pgram(df.ts,spans=9,demean=T,log='no')
pg.df<-spec.pgram(df.ts,spans=15,demean=T,log='no')
max.omega.ham<-pg.ham$freq[which(pg.ham$spec==max(pg.ham$spec))] # Find the peak
max.omega.ham<-pg.df$freq[which(pg.ham$spec==max(pg.ham$spec))] # Find the peak
max.omega.ham<-pg.df$freq[which(pg.df$spec==max(pg.df$spec))] # Find the peak
1/max.omega.ham # Period
df.ts2 = ts.intersect(df.ts, newdata=lag(df.ts,-7), dframe=TRUE) # can build new model based on lag (period)
df.trend<-lm(df.ts[time.df]~time.df) # TREND: lm of response over time
time.df<-c(1:(length(df.ts))) # create a time variable
df.trend<-lm(df.ts[time.df]~time.df) # TREND: lm of response over time
summary(df.trend)
plot(df.ts, type = "l") # plot general trend over time
abline(spam.trend, col = "red") # add trendline
pg.df<-spec.pgram(df.ts,spans=15,demean=T,log='no')
plot(df.ts, type = "l") # plot general trend over time
abline(spam.trend, col = "red") # add trendline
abline(df.trend, col = "red") # add trendline
e.ts.df<-ts(df.trend$residuals) # get residuals
plot(e.ts.df, ylab = "Residuals")
df.auto <- auto.arima(e.ts.df, trace=TRUE)
df.auto <- auto.arima(df.trend, trace=TRUE)
df.auto <- auto.arima(df.ts, trace=TRUE)
e.ts.df<-ts(df.auto$residuals) # get residuals
plot(e.ts.df, ylab = "Residuals")
par(mfrow=c(1,2))
acf(e.ts.df, main="ACF of Residuals from spam.trend")
pacf(e.ts.df,main="PACF of Residuals from spam.trend")
setwd("/Users/sabreenaabedin/Desktop/class/SYS4021")
source("AccidentInput.R")
source("SPM_Panel.R")
source("PCAplots.R")
source("http://www.phaget4.org/R/myImagePlot.R") # heatmap
source("TestSet.R")
source("princompreg.R")
source("FactorPlots.R")
source("pc.glm.R")
source("ROC.R")
source("TSbootfunctions.R")
source("Transplant.plots.R")
library(lattice)
library(boot)
library(MASS)
library(forecast)
library(lme4)
library(lme4)
source("princompreg.R")
source("http://www.phaget4.org/R/myImagePlot.R") # heatmap
ource("AccidentInput.R")
source("SPM_Panel.R")
source("PCAplots.R")
source("http://www.phaget4.org/R/myImagePlot.R") # heatmap
source("TestSet.R")
source("princompreg.R")
source("FactorPlots.R")
source("pc.glm.R")
source("ROC.R")
source("TSbootfunctions.R")
source("Transplant.plots.R")
source("AccidentInput.R")
source("SPM_Panel.R")
source("PCAplots.R")
source("http://www.phaget4.org/R/myImagePlot.R") # heatmap
source("TestSet.R")
source("princompreg.R")
source("FactorPlots.R")
source("pc.glm.R")
source("ROC.R")
source("TSbootfunctions.R")
source("Transplant.plots.R")
library(lattice)
library(boot)
library(MASS)
library(forecast)
library(lme4)
df <- read.table("housing-prices.csv", sep = ",", header = T)
View(df)
View(df)
box <-boxplot(df$Price)
df.outliers <- df[df$COLUMN > box$stats[5],] # get outliers
View(df.outliers)
box$stats
df.outliers <- df[df$Price > box$stats[5],] # get outliers
View(df.outliers)
uva.pairs(df[])
df.lm<-lm(Price~ Size, data=df) # can use . to use all variables
summary(df.lm1) # summary and p-value
summary(df.lm) # summary and p-value
lm.main<-lm(Price~ ., data=df) # can use . to use all variables
summary(lm.main) # summary and p-value
lm.interactions <- lm(Price ~ Age + Size + (Age + Size)^2, data = df)
summary(lm.interactions)
anova(df.lm, lm.interactions)
lm.complete.first <- lm(Price ~ . + (.)^2, data = df)
summary(lm.complete.first)
df.lm.step<-step(lm.complete.first) # start with a lm
summary(df.lm.step)
AIC(df.lm.step) # AIC
par(mfrow=c(2,2))
plot(df.lm.step, labels.id = NULL)
par(mfrow=c(1,1))
boxcox(df.lm.step) # box-cox plot
boxcox(df.lm.step, data = df) # box-cox plot
boxcox(df.lm,plotit=F) # just values
boxcox(df.lm,plotit=F, data = df) # just values
max(boxcox(df.lm, plotit = F)$y) # find y with max labmda
boxcox(df.lm.step,plotit=F, data = df) # just values
max(boxcox(df.lm.step, plotit = F)$y) # find y with max labmda
max(boxcox(df.lm.step, plotit = F, data = df)$y) # find y with max labmda
boxcox(df.lm, plotit = F, data = df)$x[which.max(boxcox(df.lm, plotit = F, data = df)$y)] # best labmda
L<-boxcox(df.lm, plotit = F)$x[which.max(boxcox(df.lm, plotit = F)$y)] # store as L
L<-boxcox(df.lm, plotit = F, data = df)$x[which.max(boxcox(df.lm, plotit = F, data = df)$y)] # store as L
df.selected<-df[,c('Price', 'Rooms', 'Bath', 'Size')] #no response variable here.
df.selected<-df[,c('Price', 'Rooms', 'Baths', 'Size')] #no response variable here.
df.pc<-princomp(df.selected,cor=T) # get principal components
biplot(df.pc)
loadings(df.pc)
loadintsplot(df.pc)
loadingsplot(df.pc)
var.comp(df.pc,98)
?RTSB
??RTSB
df.kfit <- fitted(df.lm)
df.ke <- residuals(df.lm)
df.mod <- model.matrix(df.lm)
df.boot <- RTSB(df$Price, df$Size, df.kfit, df.ke, df.mod,5000)
df.boot
boot.ci(df.boot, .95, index=2)
boot.ci(df.boot, .95, index=1)
boot.ci(df.boot, .95, index=2)
setwd("/Users/sabreenaabedin/Desktop/class/SYS4021")
source("AccidentInput.R")
source("SPM_Panel.R")
source("PCAplots.R")
source("http://www.phaget4.org/R/myImagePlot.R") # heatmap
source("TestSet.R")
source("princompreg.R")
source("FactorPlots.R")
source("pc.glm.R")
source("ROC.R")
source("TSbootfunctions.R")
source("Transplant.plots.R")
library(lattice)
library(boot)
library(MASS)
library(forecast)
library(lme4)
setwd("/Users/sabreenaabedin/Desktop/class/SYS4021")
source("AccidentInput.R")
source("SPM_Panel.R")
source("PCAplots.R")
source("http://www.phaget4.org/R/myImagePlot.R") # heatmap
source("TestSet.R")
source("princompreg.R")
source("FactorPlots.R")
source("pc.glm.R")
source("ROC.R")
source("TSbootfunctions.R")
source("Transplant.plots.R")
library(lattice)
library(boot)
library(MASS)
library(forecast)
library(lme4)
df<-read.table('heart.csv',header=T,sep=',')
View(df)
Ldf <- log(df[,-diag] +.1) # log transforemd predictors
Ldf <- log(df[,-"diag"] +.1) # log transforemd predictors
Ldf <- log(df[,-c("diag")] +.1) # log transforemd predictors
Ldf <- log(df[,-c('diag')] +.1) # log transforemd predictors
Ldf$diag <- df[,diag]
Ldf <- log(df[,] +.1) # log transforemd predictors
Ldf$diag <- df[,diag]
Ldf <- log(df[,c("age","sex")] +.1) # log transforemd predictors
Ldf <- log(df[,c("age","sex", "cp")] +.1) # log transforemd predictors
View(Ldf)
Ldf <- log(df[,c("age","cp",)] +.1) # log transforemd predictors
Ldf <- log(df[,c("age","cp")] +.1) # log transforemd predictors
Ldf$diag <- df[,c("diag")]
df.glm.main <- glm(diag~ cp + age, data = Ldf, family = binomial)
summary(df.glm.main)
df$cp <- factor(df$cp)
Ldf <- log(df[,c("age","cp")] +.1) # log transforemd predictors
Ldf <- log(df[,c("age")] +.1) # log transforemd predictors
Ldf$diag <- df[,c("diag")]
Ldf <- log(df[,c("age")] +.1) # log transforemd predictors
Ldf$diag <- df[,c("diag")]
df.glm.main <- glm(log(diag)~ cp + age, data = df, family = binomial)
summary(df.glm.main)
Ldf <- log(df[,c("age")] +.1) + df[,c("cp", "diag")] # log transforemd predictors
View(Ldf)
Ldf$diag <- df[,c("xp")]
Ldf$diag <- df[,c("cp")]
df<-read.table('heart.csv',header=T,sep=',')
df$cp <- factor(df$cp)
View(df)
Ldf <- log(df[,c("age")] +.1) + df[,c("cp", "diag")] # log transforemd predictors
Ldf <- log(df[,c("age")] +.1)
Ldf$diag <- df[,c("cp")]
Ldf$diag <- df[,c("cp", "diag")]
rm(Ldf)
Ldf$diag <- df[,c("cp", "diag")]
Ldf <- df[,c("cp", "diag")]
Ldf$age <- log(df[,c("age")] +.1)
df.glm.main <- glm(log(diag)~ cp + age, data = df, family = binomial)
df<-read.table('heart.csv',header=T,sep=',')
df$cp <- factor(df$cp)
Ldf <- df[,c("cp", "diag")]
Ldf$age <- log(df[,c("age")] +.1)
df.glm.main <- glm(log(diag)~ cp + age, data = Ldf, family = binomial)
df.glm.main <- glm(diag~ cp + age, data = Ldf, family = binomial)
summary(df.glm.main)
df.null <- glm(diag~1, data = Ldf, family = binomial)
anova(df.null, df.glm.main, test = "Chi")
df.glm.fake <- glm(diag~ cp + age, data = df, family = binomial)
df.glm.fake
Ldf <- df[,c("cp", "diag", "fbs")]
Ldf$age <- log(df[,c("age")])
Ldf$restbps <- log(df[,c("restbps")])
Ldf$chol <- log(df[,c("chol")])
df.glm.elog <- glm(diag~ cp + age + restbps + chol + fbs, data = Ldf, family = binomial)
df.glm.efake <- glm(diag~ cp + age + restbps + chol + fbs, data = df, family = binomial)
df$cp <- factor(df$cp)
df$fbs <- factor(df$fbs)
Ldf <- df[,c("cp", "diag", "fbs")]
Ldf$age <- log(df[,c("age")])
Ldf$restbps <- log(df[,c("restbps")])
Ldf$chol <- log(df[,c("chol")])
df.glm.elog <- glm(diag~ cp + age + restbps + chol + fbs, data = Ldf, family = binomial)
df.glm.efake <- glm(diag~ cp + age + restbps + chol + fbs, data = df, family = binomial)
anova(df.glm.efake, df.glm.fake, test = "Chi")
df.chol <- glm(diag~ cp, data = df, family = binomial)
anova(df.glm.efake, df.chol, test = "Chi")
df.null <- glm(diag~1, data = df, family = binomial)
anova(df.glm.efake, df.null, test = "Chi")
anova(df.chol, df.null, test = "Chi")
df$restecg <- factor(df$restecg)
df$sex <- factor(df$sex)
df.glm.all <- (diag~., data = df, family = binomial)
df.glm.all <- glm(diag~. ,data = df, family = binomial)
df.step <- step(df.glm.all, trace = 0) # main effects stepwise
df.step
test.df <- test.set(df, .33)
df.pred <- predict(df.step, type = "response", newdata = test.df$train) # get predictions - glm was made with training data
score.table(df.pred, test.df$test, .5)
score.table(df.pred, test.df$test, .5)
df.pred <- predict(df.step, type = "response", newdata = df) # get predictions - glm was made with training data
score.table(df.pred, df, .5)
df.pred <- predict(df.step, newdata = df) # get predictions - glm was made with training data
score.table(df.pred, df, .5)
score.table(df.pred, df$diag, .5)
df.pred <- predict(df.step, newdata = df) # get predictions - glm was made with training data
score.table(df.pred, df$diag, .5)
test.df <- test.set(df, .33)
df.pred <- predict(df.step, newdata = test.df$test) # get predictions - glm was made with training data
score.table(df.pred, test.df$train$diag, .5)
score.table(df.pred, test.df[1]$diag, .5)
score.table(df.pred, test.df$test$diag, .5)
test.df <- test.set(df, .33)
df.pred <- predict(df.step, newdata = df) # get predictions - glm was made with training data
df.pred <- predict(df.step, newdata = df) # get predictions - glm was made with training data
score.table(df.pred, df$diag, .5)
plot.roc(df.pred, df$diag, main = "ROC Curve", col = "blue")
plot.roc(df.pred, df$diag, main = "ROC Curve", col = "blue")
lm1 <- glmer(diag~ age + (1|sex), data = df, family = binomial)
lm2 <- glmer(Kidney~ age + (age|sex), data = df, family = binomial)
lm2 <- glmer(diag~ (age|sex) + (age|sex), data = df, family = binomial)
lm2 <- glmer(diag~ age + (age|sex), data = df, family = binomial)
xyplot(diag~age|sex, data = xplantC,type = c("p", "r"))
xyplot(diag~age|sex, data = df,type = c("p", "r"))
dotplot(ranef(lm2,  condVar = T), scales = list(relation = "free"))
lm2 <- glmer(diag~ (age|sex) + (age|sex), data = df, family = binomial)
lm2
df.null <- glm(diag~1, data = df, family = binomial)
anova(df.null, df.glm.main, test = "Chi")
df.glm.main <- glm(diag~ cp + age, data = df, family = binomial)
summary(df.glm.main)
df.null <- glm(diag~1, data = df, family = binomial)
anova(df.null, df.glm.main, test = "Chi")
df.glm.e <- glm(diag~ cp + age + restbps + chol + fbs, data = df, family = binomial)
anova(df.glm.e, df.glm.main, test = "Chi")
df.chol <- glm(diag~ cp, data = df, family = binomial)
anova(df.glm.efake, df.chol, test = "Chi")
anova(df.chol, df.null, test = "Chi")
df.glm.all <- glm(diag~. ,data = df, family = binomial)
df.step <- step(df.glm.all, trace = 0) # main effects stepwise
df.step
df.step
df$restecg <- factor(df$restecg)
df$sex <- factor(df$sex)
df.glm.all <- glm(diag~. ,data = df, family = binomial)
df.step <- step(df.glm.all, trace = 0) # main effects stepwise
df.step
df.pred <- predict(df.step, newdata = df) # get predictions - glm was made with training data
score.table(df.pred, df$diag, .5)
anova(lm1, lm2, test= "Chi")
